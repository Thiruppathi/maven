{"name":"Maven","tagline":"Maven Tips & Tricks","body":"# Maven - Notes, Tips & Snippets\r\nMaven Tips &amp; Tricks\r\n\r\n##Create Project Structure\r\n\r\n1. Generates Folder Structure\r\n2. Generates pom.xml\r\n\r\n```\r\nmvn archetype:generate\r\n```\r\nThis helps in configuring\r\n\r\n* Select ArcheType(e.g. Web Application, Spring, Hibernate etc.,) Choose based on project name.\r\n* Group ID(Package Name) - com.thiru.maven\r\n* Artificat ID(Project Name) - Output of the project\r\n\t* Web Applciaion - war\r\n\t* Enterprise Application - ear\r\n\t* Java Application -jar\r\n* Version\r\n\t* Default - 1.0.SNAPSHOT\r\n\t* Release -  for final Release.\r\n* Package - what package a class should belong to... ???\r\n\r\nAll these information goes in to ```pom.xml```\r\n\r\n### Sample Snippets\r\n\r\n####Snippet for generating WebApp\r\n\r\nSYNTAX\r\n```\r\nmvn archetype:generate -DgroupId={GROUPID} -DartifactId={PROJECT NAME} -DarchetypeArtificatId=maven-archetype-webapp -DinteractiveMode=false\r\n```\r\nSAMPLE\r\n````\r\nmvn archetype:generate -DgroupId=xyz.thiru.webapp -DartifactId=MyWebApp -DarchetypeArtificatId=maven-archetype-webapp -DinteractiveMode=false\r\n```\r\n\r\n\r\n\r\n## Maven Build Process\r\n\r\nMaven simplifies the process of packaging the code.\r\n\r\n### Build Life Cycle\r\n\r\nBuild lifecycle consisists of different phases. Some fo the phases have default beahviours. Specify the build phase you need. Previous phase automatically runs.\r\n\r\n####Commonly Used Phases\r\n\r\n* validate - Validation checks on the projects.\r\n* compile - Compiles the JAVA Code.\r\n* test - Executes the test cases available in test folder.\r\n* package - Creates jar/war/ear files based on the configuration.\r\n* install - Installs the generated package into local repository(.m2 folder)\r\n* deploy - Deploys the project to repository for other users to use. It doesn't deploy to App Server.\r\n* clean - Deletes the target folder.\r\n\r\nCompile Phase\r\n\r\n```\r\nmvn compile\r\n```\r\n\r\nGenerates ```.class``` files inside ```target``` folder.\r\n\r\n\r\n```\r\nmvn test\r\n```\r\n\r\nExecutes the Test Cases available in the ```test``` folder. Initial setup has dummy testcases generated by maven.\r\n\r\n\r\n```\r\nmvn package\r\n```\r\n\r\nGenerates ```jar/war/ear``` based on the ```pom.xml``` configuration.\r\n\r\n```\r\nmvn install\r\n```\r\n\r\nDownloads the dependencies from the central repository & installs your project to the local repository.\r\n\r\n```\r\nmvn clean\r\n```\r\n\r\nDeletes the target folder. Usually ``` mvn clean install``` executed together.\r\n\r\n## Adding Dependencies\r\nPull up the dependency from central repository. \r\n\r\n### Search for Dependencies\r\n\r\nSearch for Dependencies in [MVN Repository](www.mvnrepository.com)\r\n\r\n```\r\n<dependency>\r\n\t<groupId>org.slf4j</groupId>\r\n\t<artifactId>slf4j-api</artifactId>\r\n\t<version>1.7.12</version>\r\n</dependency>\r\n```\r\n\r\nAdd Scope based on your requirement\r\n\r\n```\r\n<scope>compile<scope>\r\n````\r\n\r\n## Scopes\r\n* compile - Default Scope\r\n* test\r\n* provided\r\n\r\n## Plugins\r\nDependencies are for code. Plugins are for running you pom.xml.\r\n * Compiler Plugin\r\n * Server & Servlet Container Plugin","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}